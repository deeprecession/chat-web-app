// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// CreateChatRequest defines model for CreateChatRequest.
type CreateChatRequest struct {
	ChatName string `json:"chatName"`
}

// CreateChatResponse defines model for CreateChatResponse.
type CreateChatResponse struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// User defines model for User.
type User struct {
	Username string `json:"username"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// ServerError defines model for ServerError.
type ServerError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// PostApiAuthLoginJSONRequestBody defines body for PostApiAuthLogin for application/json ContentType.
type PostApiAuthLoginJSONRequestBody = LoginUserRequest

// PostApiAuthSignupJSONRequestBody defines body for PostApiAuthSignup for application/json ContentType.
type PostApiAuthSignupJSONRequestBody = CreateUserRequest

// PostApiChatJSONRequestBody defines body for PostApiChat for application/json ContentType.
type PostApiChatJSONRequestBody = CreateChatRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// login a new chatter
	// (POST /api/auth/login)
	PostApiAuthLogin(c *gin.Context)
	// signup a new chatter
	// (POST /api/auth/signup)
	PostApiAuthSignup(c *gin.Context)
	// create a new chat
	// (POST /api/chat)
	PostApiChat(c *gin.Context)
	// get user info
	// (GET /api/user/me)
	GetApiUserMe(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthLogin(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthLogin(c)
}

// PostApiAuthSignup operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuthSignup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuthSignup(c)
}

// PostApiChat operation middleware
func (siw *ServerInterfaceWrapper) PostApiChat(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiChat(c)
}

// GetApiUserMe operation middleware
func (siw *ServerInterfaceWrapper) GetApiUserMe(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiUserMe(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/auth/login", wrapper.PostApiAuthLogin)
	router.POST(options.BaseURL+"/api/auth/signup", wrapper.PostApiAuthSignup)
	router.POST(options.BaseURL+"/api/chat", wrapper.PostApiChat)
	router.GET(options.BaseURL+"/api/user/me", wrapper.GetApiUserMe)
}

type BadRequestJSONResponse Error

type ServerErrorJSONResponse Error

type UnauthorizedJSONResponse Error

type PostApiAuthLoginRequestObject struct {
	Body *PostApiAuthLoginJSONRequestBody
}

type PostApiAuthLoginResponseObject interface {
	VisitPostApiAuthLoginResponse(w http.ResponseWriter) error
}

type PostApiAuthLogin200ResponseHeaders struct {
	Authorization string
}

type PostApiAuthLogin200Response struct {
	Headers PostApiAuthLogin200ResponseHeaders
}

func (response PostApiAuthLogin200Response) VisitPostApiAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Authorization", fmt.Sprint(response.Headers.Authorization))
	w.WriteHeader(200)
	return nil
}

type PostApiAuthLogin400JSONResponse struct{ BadRequestJSONResponse }

func (response PostApiAuthLogin400JSONResponse) VisitPostApiAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuthLogin401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PostApiAuthLogin401JSONResponse) VisitPostApiAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuthLogin500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostApiAuthLogin500JSONResponse) VisitPostApiAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuthSignupRequestObject struct {
	Body *PostApiAuthSignupJSONRequestBody
}

type PostApiAuthSignupResponseObject interface {
	VisitPostApiAuthSignupResponse(w http.ResponseWriter) error
}

type PostApiAuthSignup200ResponseHeaders struct {
	Authorization string
}

type PostApiAuthSignup200Response struct {
	Headers PostApiAuthSignup200ResponseHeaders
}

func (response PostApiAuthSignup200Response) VisitPostApiAuthSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Authorization", fmt.Sprint(response.Headers.Authorization))
	w.WriteHeader(200)
	return nil
}

type PostApiAuthSignup400JSONResponse struct{ BadRequestJSONResponse }

func (response PostApiAuthSignup400JSONResponse) VisitPostApiAuthSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuthSignup409JSONResponse Error

func (response PostApiAuthSignup409JSONResponse) VisitPostApiAuthSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuthSignup500JSONResponse struct{ ServerErrorJSONResponse }

func (response PostApiAuthSignup500JSONResponse) VisitPostApiAuthSignupResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiChatRequestObject struct {
	Body *PostApiChatJSONRequestBody
}

type PostApiChatResponseObject interface {
	VisitPostApiChatResponse(w http.ResponseWriter) error
}

type PostApiChat201JSONResponse CreateChatResponse

func (response PostApiChat201JSONResponse) VisitPostApiChatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiChat400JSONResponse struct{ BadRequestJSONResponse }

func (response PostApiChat400JSONResponse) VisitPostApiChatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiChat403JSONResponse Error

func (response PostApiChat403JSONResponse) VisitPostApiChatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostApiChat409JSONResponse Error

func (response PostApiChat409JSONResponse) VisitPostApiChatResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetApiUserMeRequestObject struct {
}

type GetApiUserMeResponseObject interface {
	VisitGetApiUserMeResponse(w http.ResponseWriter) error
}

type GetApiUserMe200JSONResponse User

func (response GetApiUserMe200JSONResponse) VisitGetApiUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiUserMe400JSONResponse struct{ BadRequestJSONResponse }

func (response GetApiUserMe400JSONResponse) VisitGetApiUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiUserMe401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetApiUserMe401JSONResponse) VisitGetApiUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiUserMe500JSONResponse struct{ ServerErrorJSONResponse }

func (response GetApiUserMe500JSONResponse) VisitGetApiUserMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// login a new chatter
	// (POST /api/auth/login)
	PostApiAuthLogin(ctx context.Context, request PostApiAuthLoginRequestObject) (PostApiAuthLoginResponseObject, error)
	// signup a new chatter
	// (POST /api/auth/signup)
	PostApiAuthSignup(ctx context.Context, request PostApiAuthSignupRequestObject) (PostApiAuthSignupResponseObject, error)
	// create a new chat
	// (POST /api/chat)
	PostApiChat(ctx context.Context, request PostApiChatRequestObject) (PostApiChatResponseObject, error)
	// get user info
	// (GET /api/user/me)
	GetApiUserMe(ctx context.Context, request GetApiUserMeRequestObject) (GetApiUserMeResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiAuthLogin operation middleware
func (sh *strictHandler) PostApiAuthLogin(ctx *gin.Context) {
	var request PostApiAuthLoginRequestObject

	var body PostApiAuthLoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuthLogin(ctx, request.(PostApiAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAuthLoginResponseObject); ok {
		if err := validResponse.VisitPostApiAuthLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiAuthSignup operation middleware
func (sh *strictHandler) PostApiAuthSignup(ctx *gin.Context) {
	var request PostApiAuthSignupRequestObject

	var body PostApiAuthSignupJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuthSignup(ctx, request.(PostApiAuthSignupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuthSignup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAuthSignupResponseObject); ok {
		if err := validResponse.VisitPostApiAuthSignupResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiChat operation middleware
func (sh *strictHandler) PostApiChat(ctx *gin.Context) {
	var request PostApiChatRequestObject

	var body PostApiChatJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiChat(ctx, request.(PostApiChatRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiChat")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiChatResponseObject); ok {
		if err := validResponse.VisitPostApiChatResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiUserMe operation middleware
func (sh *strictHandler) GetApiUserMe(ctx *gin.Context) {
	var request GetApiUserMeRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiUserMe(ctx, request.(GetApiUserMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiUserMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiUserMeResponseObject); ok {
		if err := validResponse.VisitGetApiUserMeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9yW3W7bNhTHX4XgdqlF9rI0je8Sx23l1c6QOOmGwBeMdCLRkUiWpGqrhd99OKS/LWFp",
	"EG9Dr0yZ5Pmfjx8P+Y3GslBSgLCGdr7RDFgC2g3PS5v1P41waOIMCoajBEysubJcCtqh/U8j8gBMgyas",
	"tJnU/CvDKWLlEwgaUJixQuVAO/TCL4Oqnz28j/kV70e3X6P2kEcmEtcncTd6Ez2pP++6/bMjqPo5fDjn",
	"V5Pe8WASTa8ue+3h5cBERZ4l3ejNYBRXg9HTyXDUaw2qKY+P73g0kfg7YVX/7Oj67exU3F51T6YfT+9+",
	"KdP87AnaD4+ns+ll/q79OPi9+PCX6M5Oi0GPBtRWCj00VnOR0vl8HlANRklhwCXigiXX8LkEY/ErlsKC",
	"cEOmVM5jF3E4MZiRzVT9rOGRduhP4TrDoZ81YU9rqb3UdkYvWEIWYuSmEpbN6DygN6C/gPabDu6CFyOL",
	"+YDeimVtITm8+pYaTi92oMGuBmahmzG7UQ+lpQJtua9VnDE7ZAXgeLeuWNbPJdcYxv165XhFgHyYQGwx",
	"5k0lT8K+FE9qRAIqGtUbVG4N6MZ4FDNmKnW9VGlAi2cFu1oZrC3Wxb1CbNuLAoxh6TN0lgvrbH+UKRf/",
	"p2DRl30nXqCzbxy5hbjU3FY3yK837Vsl9tX11zupC2Z9L6UL2tGSn113p8xa5c8LF4/SOcet66xIKWFK",
	"0YB+AW38MWoftY5aGKRUIJjitEOP3V+YE5s5d0KmeIinLcyxNC4V0tdl+0y6acKIgCnBY2OdY5g0d/Sj",
	"hHboH9LYc8UxOFdo6nMFxl7IpHq1vrEH0Xy/X//aau3HYMo4JrlMU0hosHvNrS6uJvnF+nB5JzrR37xO",
	"3fqVP+HG5eG2tP95y3YLDOjJc3Q2r4hN/Gjnfhu8+/F8HFBTFgXTVWNxLUsNMo6e0DEaXNNieCpK1YyL",
	"n38+Lzfe3mGA2e+x30UMxgIJce79d9CcHf7exUZGuCGW4cvtxdStsGqAoIErXNAMVOxquGGriaaunzsc",
	"R5tvj1qO2gcRXDxBasrmIPX5SXxqXsrY8eEZG0pLWJ7LKSTESrIq69rvfwF0FCM7tH9Pv6yDcUm1+1xT",
	"jQ+E0L8kUqjhOgVLcA1xV/ou0+8BkcbONQBa37BeJVPuGVSTqGuwpRYbDv4wV95u3pflw/+wfM4W2jbO",
	"VKnzxQOsE4a5jFmeSWM7b1utFp2P538HAAD//wEn1K5DDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
